name: Deploy to Staging

on:
  push:
    branches:
      - develop

jobs:
  deploy-to-staging:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    
    - name: Create environment files
      run: |
        echo "${{ secrets.FIREBASE_CONFIG_STAGING }}" > ./db-master/.env
        echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}" > ./service-account.json
    
    - name: Install main dependencies
      working-directory: ./db-master
      run: npm ci
    
    - name: Install function dependencies
      working-directory: ./functions
      run: npm ci
    
    - name: Build frontend for staging
      working-directory: ./db-master
      run: |
        npm run build
      env:
        VITE_APP_ENV: staging
        VITE_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY_STAGING }}
        VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN_STAGING }}
        VITE_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID_STAGING }}
        VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET_STAGING }}
        VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID_STAGING }}
        VITE_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID_STAGING }}
    
    - name: Build functions
      working-directory: ./functions
      run: npm run build
    
    - name: Deploy to Firebase Staging
      id: firebase_deploy
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}'
        projectId: db888-67827
        channelId: staging
        target: staging
      env:
        FIREBASE_CLI_PREVIEWS: hostingchannels
    
    - name: Deploy Firebase Functions to Staging
      id: functions_deploy
      run: |
        npm install -g firebase-tools
        FUNCTIONS_OUTPUT=$(firebase deploy --only functions --project db888-67827 --force --token "${{ secrets.FIREBASE_TOKEN }}" --non-interactive)
        echo "::set-output name=functions_output::$FUNCTIONS_OUTPUT"
        echo "$FUNCTIONS_OUTPUT" | grep -oP 'Function URL \(.*\): \K.*' | head -1 > functions_url.txt
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ./service-account.json
    
    - name: Log Deployment
      run: |
        mkdir -p deployment-logs
        node scripts/deployment/log-deployment.js staging ${{ steps.firebase_deploy.outputs.hosting_url }} ${{ steps.functions_deploy.outputs.functions_url }}
    
    - name: Add deployment comment to PR
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const issue_number = context.issue.number;
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue_number,
            body: 'ðŸš€ Deployed to staging environment: https://db888-staging.web.app'
          });
    
    - name: Notify deployment success
      run: |
        echo "Deployed successfully to staging environment"
        echo "Visit https://db888-staging.web.app to view the application"