# DB Master - 게임 데이터베이스 관리 시스템 PRD

## 개요
본 시스템은 게임 운영자 및 관리자가 MariaDB 데이터베이스 구조를 쉽게 이해하고 특정 조건에 맞는 사용자를 효율적으로 검색할 수 있도록 설계된 웹 애플리케이션입니다. Vite와 React를 기반으로 구축되며, 데이터베이스 정보의 시각화, 동적 쿼리 생성, 사용자 친화적 UI를 제공합니다. 백엔드 구성 및 사용자 인증에는 Firebase를 활용하여 빠른 개발과 안정적인 서비스를 제공합니다.

## 비전
게임 운영 팀이 복잡한 SQL 쿼리 작성 없이도 Windows 서버에 호스팅된 MariaDB 데이터베이스를 직관적으로 이해하고 효율적으로 데이터를 검색하여 비즈니스 의사결정을 향상시키는 것을 목표로 합니다.

## 목표
1. 데이터베이스 구조를 시각적으로 명확하게 표현
2. 테이블 간의 관계 및 필드 정보 직관적 제공
3. 동적 쿼리 빌더를 통한 SQL 지식 없이도 복잡한 검색 수행
4. 특정 조건에 맞는 사용자를 신속하게 식별
5. 자주 사용하는 쿼리 저장 및 재사용 기능 제공
6. 검색 결과 데이터 시각화 및 내보내기 기능

## 주요 기능 요구사항

### 1. 데이터베이스 연결 및 관리
- MariaDB 전용 연결 최적화: Windows 서버의 MariaDB에 최적화된 연결 관리
- 연결 정보 관리: 호스트, 사용자 이름, 비밀번호, 데이터베이스 이름 등 정보 저장
- 연결 테스트: 저장 전 연결 테스트 기능
- 보안: Firebase Authentication을 활용한 사용자 인증 및 민감한 연결 정보 암호화 저장

### 2. 데이터베이스 스키마 시각화
- 테이블 목록 표시: MariaDB의 모든 테이블 목록 제공
- 테이블 구조 시각화: 각 테이블의 필드 정보(이름, 타입, 제약조건 등) 표시
- 관계 시각화: 테이블 간의 관계를 직관적으로 보여주는 ERD 다이어그램
- 필드 메타데이터: 각 필드가 가질 수 있는 값 유형, 의미 등에 대한 정보 추가 기능
- 데이터 타입 매핑: MariaDB 특화 데이터 타입에 대한 정확한 해석 제공

### 3. 테이블 데이터 브라우저
- 페이지네이션: 대용량 데이터 효율적 탐색
- 필터링: 다양한 조건으로 테이블 데이터 필터링
- 정렬: 다중 컬럼 정렬 기능
- 검색: 테이블 내 텍스트 검색 기능
- 필드 값 분포 보기: 특정 필드의 값 분포를 시각화

### 4. 고급 쿼리 빌더
- 시각적 쿼리 설계: 드래그 앤 드롭으로 쿼리 조건 설정
- 다중 테이블 조인: 관련 테이블 간 조인 쿼리 시각적 구성
- 복합 조건: AND, OR 연산자를 사용한 복합 조건 구성
- 필드 값 유효성 검사: 필드 타입에 맞는 입력 유효성 검사
- 입력 조건 자동완성: 가능한 값 목록 제시
- 특정 유형 조건 지원: 시간 기반 필터(최근 n일), 숫자 범위, 문자열 패턴 등 지원
- MariaDB 특화 함수 지원: MariaDB 특화 함수 및 문법 지원

### 5. 특화된 사용자 검색 템플릿
- 검색 템플릿: 자주 사용하는 검색 패턴을 Firebase Firestore에 템플릿으로 저장
- 템플릿 매개변수화: 템플릿에 변수 설정 가능(기간, 이벤트 ID 등)
- 템플릿 공유: 팀원 간 템플릿 공유 기능

### 6. 결과 시각화 및 내보내기
- 결과 그리드: 사용자 정의 컬럼 표시
- 결과 필터링: 검색 결과 내 필터링
- 그래프 시각화: 검색 결과 기반 그래프 생성
- 내보내기: CSV, Excel, JSON 형식 내보내기 지원
- 결과 저장: 검색 결과를 Firebase Firestore에 임시 또는 영구 저장

### 7. 사용자 관리 및 권한
- Firebase Authentication: 사용자 계정 관리를 위한 Firebase 인증 활용
- 역할 기반 액세스 제어: Firebase Security Rules를 활용한 권한 관리
- 활동 로그: Firebase Firestore에 모든 쿼리 실행 및 변경 사항 기록

### 8. 코드 생성 및 관리
- SQL 쿼리 노출: 생성된 쿼리 확인 및 편집 기능
- 쿼리 저장: 유용한 쿼리를 Firebase Firestore에 저장 및 공유
- 쿼리 스케줄링: Firebase Cloud Functions를 활용한 반복적 쿼리 실행 자동화
- 쿼리 결과 알림: Firebase Cloud Messaging을 활용한 알림 설정

## 기술 요구사항
1. 프론트엔드: 
   - Vite + React
   - TypeScript (타입 안전성 보장)
   - React Router v6 (라우팅)

2. UI 프레임워크: 
   - Tailwind CSS (유연한 디자인 시스템)
   - Headless UI (접근성 고려한 컴포넌트)

3. 상태 관리: 
   - Zustand (단순한 상태 관리)
   - React Query (서버 상태 관리)

4. 데이터 시각화: 
   - Recharts (반응형 차트)
   - React Flow (관계 다이어그램)

5. 데이터 그리드: 
   - TanStack Table v8 (가볍고 유연한 테이블)

6. 백엔드 서비스:
   - Firebase Authentication (사용자 인증)
   - Firebase Firestore (데이터 저장)
   - Firebase Cloud Functions (서버리스 기능)
   - Firebase Hosting (웹 호스팅)

7. 데이터베이스 연결: 
   - Node.js 기반 MariaDB 커넥터
   - Firebase Cloud Functions를 통한 안전한 DB 접근

## 구현 계획 (로드맵)
1. 1단계 (1.5개월): 
   - Firebase 프로젝트 설정
   - 기본 UI 프레임워크 구축
   - MariaDB 연결 기능
   - 테이블 구조 시각화

2. 2단계 (1.5개월): 
   - 기본 쿼리 빌더
   - 사용자 인증 및 권한 관리
   - 테이블 데이터 브라우저

3. 3단계 (1.5개월): 
   - 고급 쿼리 빌더
   - 사용자 검색 템플릿
   - 결과 시각화 기본 기능

4. 4단계 (1.5개월): 
   - 쿼리 저장 및 공유
   - 고급 결과 시각화
   - 보고서 생성 및 내보내기